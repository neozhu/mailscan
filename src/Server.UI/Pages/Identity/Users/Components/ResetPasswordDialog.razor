@using CleanArchitecture.Blazor.Server.UI.Models.Identity;
    using CleanArchitecture.Blazor.Server.UI.Pages._Models.Identity
@inherits MudComponentBase

@inject IStringLocalizer<Users> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@Model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="@L["User Name"]" For="@(()=>Model.UserName)" Value="Model.UserName"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudPasswordField Immediate="true"
                                      Label="@L["New Password"]"
                                      @bind-Value="Model.Password"
                                      For="@(() => Model.Password)"
                                      Variant="Variant.Text"
                                      PasswordMode="true"
                                      Required="true"
                                      RequiredError="@L["password is required!"]"
                                     Class="mt-4" />
                </MudItem>
                <MudItem xs="12">
                    <MudPasswordField Immediate="true"
                                      Label="@L["Confirm New Password"]"
                                      @bind-Value="Model.ConfirmPassword"
                                      For="@(() => Model.ConfirmPassword)"
                                      Variant="Variant.Text"
                                      PasswordMode="true"
                                      Required="true"
                                      RequiredError="@L["confirm password is required!"]"
                                      Class="mt-4" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">@ConstantString.Ok</MudButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = default!;

    [EditorRequired]
    [Parameter]
    public ResetPasswordFormModel Model { get; set; } = default!;

    private MudForm? _form = default!;
    private readonly ResetPasswordFormModelValidator _modelValidator = new ResetPasswordFormModelValidator();

    private async Task Submit()
    {
        await _form!.Validate();
        if (_form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private void Cancel() => MudDialog.Cancel();

    // TODO: probably this will be moved as feature in the application layer
    public class ResetPasswordFormModelValidator : AbstractValidator<ResetPasswordFormModel>
    {
        public ResetPasswordFormModelValidator()
        {
            RuleFor(p => p.Password).NotEmpty().WithMessage("Your password cannot be empty")
                     .MinimumLength(6).WithMessage("Your password length must be at least 6.")
                     .MaximumLength(16).WithMessage("Your password length must not exceed 16.")
                     .Matches(@"[A-Z]+").WithMessage("Your password must contain at least one uppercase letter.")
                     .Matches(@"[a-z]+").WithMessage("Your password must contain at least one lowercase letter.")
                     .Matches(@"[0-9]+").WithMessage("Your password must contain at least one number.")
                     .Matches(@"[\@\!\?\*\.]+").WithMessage("Your password must contain at least one (@!? *.).");
            RuleFor(x => x.ConfirmPassword)
                 .Equal(x => x.Password);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<ResetPasswordFormModel>.CreateWithOptions((ResetPasswordFormModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}