@using System.Globalization
@using Microsoft.AspNetCore.Builder
@using Microsoft.Extensions.Options
@using CleanArchitecture.Blazor.Server.UI.Services
@using CleanArchitecture.Blazor.Server.UI.Services.Layout

@inject NavigationManager Navigation
@inject IOptions<RequestLocalizationOptions> LocalizationOptions
@inject LayoutService LayoutService

<MudTooltip Text="@CurrentLanguage">
    <MudMenu Class="mx-1" Icon="@Icons.Material.Outlined.Translate" Color="Color.Default" Dense="true">
        @if (SupportedLanguages is not null)
        {
            @foreach (var language in SupportedLanguages)
            {
                if (language.Name == CurrentLanguage)
                {
                    <MudMenuItem style="background:var(--mud-palette-primary); color:white">@language.DisplayName</MudMenuItem>
                }
                else
                {
                    <MudMenuItem OnClick="(()=> ChangeLanguageAsync(language.Name))">@language.DisplayName</MudMenuItem>
                }
            }
        }
    </MudMenu>
</MudTooltip>

@code
{
    public string? CurrentLanguage { get; set; } = "en-US";
    public List<CultureInfo>? SupportedLanguages { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        SupportedLanguages = LocalizationOptions.Value.SupportedCultures?.ToList();
        CurrentLanguage = CultureInfo.CurrentCulture.Name;
        return Task.CompletedTask;
    }

    private async Task ChangeLanguageAsync(string languageCode)
    {
        CurrentLanguage = languageCode;
        Navigation.NavigateTo(Navigation.BaseUri + "?culture=" + languageCode, forceLoad: true);

        if (new CultureInfo(languageCode).TextInfo.IsRightToLeft)
            await LayoutService.SetRightToLeft();
        else
            await LayoutService.SetLeftToRight();

        await Task.CompletedTask;
    }
}