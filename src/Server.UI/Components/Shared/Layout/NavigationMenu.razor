@using CleanArchitecture.Blazor.Server.UI.Models.NavigationMenu
@using CleanArchitecture.Blazor.Server.UI.Services.Navigation
@inherits FluxorComponent

@inject IMenuService MenuService
@inject IState<Fluxor.UserProfileState> UserProfileState
@inject LayoutService LayoutService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<NavigationMenu> L

<MudDrawer Breakpoint="Breakpoint.Md"
           Class="side-menu"
           Elevation="0"
           Open="DrawerOpen"
           OpenChanged="@(e => DrawerOpenChanged.InvokeAsync(e))"
           Variant="DrawerVariant.Responsive">
    <MudDrawerHeader Class="align-center d-flex align-center pa-0">
        <MudIcon Class="ml-6 mr-2"
                 Color="Color.Primary"
                 Icon="@Icons.Custom.Brands.MudBlazor"
                 Size="Size.Large"/>
        <MudText Typo="Typo.subtitle2">
            <b>@L[Settings.AppName]</b>
        </MudText>
    </MudDrawerHeader>

    @if (DrawerOpen)
    {
        <div class="mx-3">
            <MudButton Class="d-flex justify-start my-3 user-button"
                       FullWidth="true">
                <ChildContent>
                    <MudStack Row="true">
                        @if (IsLoading)
                        {
                           <MudSkeleton SkeletonType="SkeletonType.Circle" Width="40px" Height="40px"   />
                           <MudStack Justify="Justify.Center" Spacing="0">
                                 <MudSkeleton Width="120px" Height="12px"  />
                                 <MudSkeleton Width="120px" Height="12px"   />
                           </MudStack>
                        }
                        else
                        {
                            <MudAvatar>
                                @if (string.IsNullOrEmpty(UserProfile?.ProfilePictureDataUrl))
                                {
                                    <MudImage>@UserProfile?.UserName?.First()</MudImage>
                                }
                                else
                                {
                                    <MudImage Src="@UserProfile?.ProfilePictureDataUrl"></MudImage>
                                }

                            </MudAvatar>
                        }
                        <MudStack Justify="Justify.SpaceBetween" Spacing="0">
                            <MudText Typo="Typo.body1">@UserProfile?.DisplayName</MudText>
                            <MudText Typo="Typo.body2">@UserProfile?.DefaultRole</MudText>
                        </MudStack>
                    </MudStack>
                </ChildContent>
            </MudButton>
        </div>
    }
    else
    {
        <div class="d-flex justify-center my-3">
            <MudAvatar>
                @if (string.IsNullOrEmpty(UserProfile?.ProfilePictureDataUrl))
                {
                    <MudImage>@UserProfile?.UserName?.First()</MudImage>
                }
                else
                {
                    <MudImage Src="@UserProfile?.ProfilePictureDataUrl"></MudImage>
                }

            </MudAvatar>
        </div>
    }

    <MudNavMenu>
        @foreach (var section in MenuSections.Where(x => x.Roles == null || x.Roles.Any(x => Roles.Contains(x))))
        {
            @if (section is not null)
            {
                @if (DrawerOpen)
                {
                    <div class="@(LayoutService.IsRTL ? "mr-6" : "ml-6") my-3">
                        <MudText Typo="Typo.caption">
                            <b>
                                @(L[section.Title])
                            </b>
                        </MudText>
                    </div>
                }

                @if (section.SectionItems is not null)
                {
                    @foreach (var sectionItem in section.SectionItems.Where(x => x.Roles == null || x.Roles.Any(x => Roles.Contains(x))))
                    {
                        @if (sectionItem is { IsParent: true, MenuItems: not null })
                        {
                            <MudNavGroup Icon="@sectionItem.Icon" Title="@L[sectionItem.Title]" Expanded="Expanded(sectionItem)">
                                @foreach (var menuItem in sectionItem.MenuItems.Where(x => x.Roles == null || x.Roles.Any(x => Roles.Contains(x))))
                                {
                                    @if (DrawerOpen)
                                    {
                                        <MudNavLink Disabled="@(menuItem.PageStatus != PageStatus.Completed)" Href="@(menuItem.Href)" Target="@(menuItem.Target)" Match="NavLinkMatch.All">
                                            <div class="d-flex">
                                                @(L[menuItem.Title])
                                                @if (menuItem.PageStatus != PageStatus.Completed)
                                                {
                                                    <MudSpacer/>
                                                    <MudChip Class="mr-4" Color="@Color.Primary" Size="Size.Small" Variant="Variant.Text">
                                                        @(L[menuItem.PageStatus.GetDescription()])
                                                    </MudChip>
                                                }
                                            </div>
                                        </MudNavLink>
                                    }
                                }
                            </MudNavGroup>
                        }
                        else
                        {
                            <MudNavLink Disabled="@(sectionItem.PageStatus != PageStatus.Completed)" Href="@(sectionItem.Href)" Icon="@(sectionItem.Icon)" Target="@(sectionItem.Target)" Match="NavLinkMatch.All">
                                <div class="d-flex">
                                    @(L[sectionItem.Title])
                                    @if (sectionItem.PageStatus != PageStatus.Completed)
                                    {
                                        <MudSpacer/>
                                        <MudChip Class="mr-4" Color="@Color.Primary" Size="Size.Small" Variant="Variant.Text">
                                            @(L[sectionItem.PageStatus.GetDescription()])
                                        </MudChip>
                                    }
                                </div>
                            </MudNavLink>
                        }
                    }
                }
            }
        }
    </MudNavMenu>

    <MudDivider Class="mt-auto"></MudDivider>
    <MudNavMenu Class="d-flex justify-space-between pa-4">
        <MudLink Href="#" Style="font-size:0.625rem;line-height:1.125rem;color:#6F6F6F !important">@Settings.Copyright</MudLink>
        <MudText Class="" Style="font-size:0.625rem;line-height:1.125rem;color:#6F6F6F !important">version @Settings.Version</MudText>
    </MudNavMenu>

</MudDrawer>

<style>

    .mud-nav-link {
        white-space: normal !important;
    }
    .user-button {
        text-transform: none;
        background: rgba(var(--mud-palette-primary-rgb), 0.1)
    }

    .side-menu .mud-chip.mud-chip-size-small {
        font-size: 0.625rem;
        height: 1.125rem;
    }
</style>

@if (LayoutService.IsRTL)
{
    <style>
        .mud-nav-link.active:not(.mud-nav-link-disabled) {
            border-left: 3px solid var(--mud-palette-primary);
            background-color: rgba(var(--mud-palette-primary-rgb), 0.1);
        }
        .side-menu {
            border-left: 1px solid var(--mud-palette-table-lines)
        }  
    </style>
}
else
{
    <style>
        .mud-nav-link.active:not(.mud-nav-link-disabled) {
            border-right: 3px solid var(--mud-palette-primary);
        }
        
        .side-menu {
            border-right: 1px solid var(--mud-palette-table-lines)
        }
    </style>
}

@code
{
    [EditorRequired][Parameter]
    public EventCallback<bool> DrawerOpenChanged { get; set; }

    [EditorRequired][Parameter]
    public bool DrawerOpen { get; set; }

    private UserProfile UserProfile => UserProfileState.Value.UserProfile;
    private bool IsLoading => UserProfileState.Value.IsLoading;
    private IEnumerable<MenuSectionModel> MenuSections => MenuService.Features;
    private string[] Roles => UserProfile.AssignedRoles ?? Array.Empty<string>();

    private bool Expanded(MenuSectionItemModel menu)
    {
        string href = NavigationManager.Uri[(NavigationManager.BaseUri.Length - 1)..];
        return menu is { IsParent: true, MenuItems: not null } &&
               menu.MenuItems.Any(x => !string.IsNullOrEmpty(x.Href) && x.Href.Equals(href));
    }
}