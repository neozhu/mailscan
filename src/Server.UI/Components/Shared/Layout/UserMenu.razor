@using CleanArchitecture.Blazor.Infrastructure.Services.JWT;
@using CleanArchitecture.Blazor.Server.UI.Services

@inherits FluxorComponent

@inject NavigationManager NavigationManager
@inject IState<Fluxor.UserProfileState> UserProfileState
@inject IStringLocalizer<SharedResource> L
@inject IAccessTokenProvider TokenProvider


<MudTooltip Arrow="true" Text="@L["User Profile"]">
    <MudMenu AnchorOrigin="Origin.BottomRight"
             Icon="@Icons.Material.Filled.PermIdentity"
             Class="mx-1"
             LockScroll="true"
             TransformOrigin="Origin.TopRight">
        <ChildContent>
            <div class="pb-4"
                 style="min-width: 260px;margin-bottom:0px!important">
                <MudStack Row="true" Class="ma-4">
                    @if (IsLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Color="Color.Default" Indeterminate="true" />
                    }
                    else
                    {
                        <MudAvatar>
                            @if (string.IsNullOrEmpty(UserProfile?.ProfilePictureDataUrl))
                            {
                                <MudImage>@UserProfile?.UserName?.First()</MudImage>
                            }
                            else
                            {
                                <MudImage Src="@UserProfile?.ProfilePictureDataUrl"></MudImage>
                            }
                        </MudAvatar>
                    }
                    <MudStack Justify="Justify.SpaceBetween" Spacing="0">
                        <MudText Typo="Typo.body1">@UserProfile?.DisplayName</MudText>
                        <MudText Typo="Typo.body2">@UserProfile?.Email</MudText>
                    </MudStack>
                </MudStack>

                <MudDivider Class="my-2" />
                <MudMenuItem Href="/user/profile">
                    <div class="d-flex">
                        <MudIcon Class="mx-2"
                                 Icon="@Icons.Material.Filled.Person" />
                        <MudText>@L["Profile"]</MudText>
                    </div>
                </MudMenuItem>
                <MudMenuItem OnClick="OnSettingClick">
                    <div class="d-flex">
                        <MudIcon Class="mx-2"
                                 Icon="@Icons.Material.Filled.Settings" />
                        <MudText>@L["Settings"]</MudText>
                    </div>
                </MudMenuItem>
                <div class="mt-4 mx-4">
                    <MudButton Color="Color.Default"
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.Logout"
                               OnClick="OnLogout"
                               Variant="Variant.Outlined">
                        @L["Logout"]
                    </MudButton>
                </div>
            </div>
        </ChildContent>
    </MudMenu>
</MudTooltip>

@code 
{
    [Parameter]
    public EventCallback<MouseEventArgs> OnSettingClick { get; set; }
    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;
    private bool IsLoading => UserProfileState.Value.IsLoading;
    private UserProfile UserProfile => UserProfileState.Value.UserProfile;

    private async Task OnLogout()
    {
        var parameters = new DialogParameters<LogoutConfirmation>
        {
            { x=>x.ContentText, $"{ConstantString.LogoutConfirmation}"},
            { x=>x.Color,  Color.Error}
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };
        var dialog = DialogService.Show<LogoutConfirmation>(ConstantString.LogoutConfirmationTitle, parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await TokenProvider.RemoveAuthDataFromStorage();
            ((BlazorAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
        }
    }
}